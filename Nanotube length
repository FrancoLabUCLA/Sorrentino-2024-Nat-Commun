%%%% Code procedure:
%
% We will import the raw image of tubes and eventually using the image
% processing toolbox we will obtain the image that any tube with
% intersections is eliminated.


%%%%% Starting of checking point %%%%%

clc; %these lines clear the previous variables and code from screen
clear;
close all;

L1 = [];
% L2 = [];
% L3 = [];

tiffFiles = dir('*.jpg');
numfiles = length(tiffFiles);
mydata = cell(1, numfiles);

for k = 1:numfiles
    clc
    I = imread(tiffFiles(k).name);
    level = graythresh(I);
    figure(1)
    imshow(I)
    
    BW = ~im2bw(I,level); %add ~ if image is white background, black tubes (already thresheld)
    figure(2)
    imshow(BW);
    
    % BW1 = bwmorph(BW,'close',Inf);
    % figure(3)
    % imshow(BW1)
    
    
    BW2 = bwmorph(BW,'thin',Inf);
    figure(3)
    imshow(BW2);
    
    % Vahid : Check if we are allowed to use ``bwmorph(BW2,'fill',Inf)''.
    % The example is as follow,
    
    % C = [1 1 1;...
    %      1 0 1;...
    %      1 1 1];
    % Cfill = bwmorph(C,'fill',Inf);
    % Cfill =
    %
    % [1     1     1;...
    %  1     1     1;...
    %  1     1     1]
    
    BW3 = bwmorph(BW2,'fill',Inf);
    figure(4)
    imshow(BW3);
    
    % Vahid : Check the following example for ``spur''
    
    %     A = [1 0 0 0 0 0 0;...
    %          0 1 1 1 0 0 0;...
    %          0 1 0 0 0 0 0;...
    %          1 0 0 0 0 0 0];
    
    %     Aspur1 = bwmorph(A,'spur',1)
    
    %     Aspur1 = [1 0 0 0 0 0 0;...
    %               0 1 1 0 0 0 0;...
    %               0 1 0 0 0 0 0;...
    %               1 0 0 0 0 0 0];
    
    %     Aspur2 = bwmorph(A,'spur',2)
    
    %     Aspur2 = [1 0 0 0 0 0 0;...
    %               0 1 0 0 0 0 0;...
    %               0 1 0 0 0 0 0;...
    %               1 0 0 0 0 0 0];
    
    %     BW3 = bwmorph(BW2,'spur',2);
    %     figure(5)
    %     imshow(BW3)
    
    B = bwmorph(BW3, 'branchpoints');  % This line will identify the branchpoints,
    % 1 : It means that pixel is a
    % branch point
    % 0 : otherwise
    
    % [y1,x1] = find(B);
    % BW4 = imsubtract(BW2,B); % set branch points to zero
    % figure(6)
    % imshow(B)
    
    [y1,x1] = find(B == 1);  % This line identify the locations of the branchpoints
    % ex. : if we have a branch point as follow
    % B = [0 0 0 0;...
    %      0 0 1 0;...
    %      0 0 0 0;...
    % The result we be y1 = 2 and x1 = 3;
    
    [labeled,numObjects] = bwlabel(BW3);  % This line label the pixels connected to each other.
    % We can name each sets with
    % similar tags as a single tube
    
    T = [];
    
    % The following process finds the corresponding tag of each
    % branch point (First for-loop), then find the locations of
    % all pixels with similar tag (2nd for-loop).
    % Finally, the 3rd for-loop will discard the tubes with intersections
    
    for i = 1:length(x1)
        T(i) = labeled(y1(i),x1(i));
    end
    
    for j = 1:length(T);
        [r,c] = find(labeled == T(j));
        for k = 1:length(r)
            BW3(r(k),c(k)) = 0;   % This
        end
    end
    imshow(BW3)
    % The BW2 is your new image by eliminating the items with
    % intersecting points.
    
    %%%%% Ending of checking point %%%%%
    
    % Determines the perimeter of each tube
    STATS = regionprops(BW3, 'Perimeter'); 
    % I am not sure why we use the following lines.
    % But probably we need to change the ``labeled'' in the above command
    % line to ``BW2''. Please let me know about the followings if you need
    % me to debug them. (Done!)
    
    allperm = [STATS.Perimeter]'; % This converts array to list.
    % allperm(labeled) = []; % VM : I commented this line. The reason is as follow:
    % In the above lines, after finding the perimeter of each tube and list
    % it, we were supposed to discard the elements that have branchpoint.
    % But after modifing the code in lines 110-123, we already eliminated
    % the tubes with branchpoint.
    
    data1 = allperm.*0.11./2; % Leo : converts pixels to um then divides perm by 2 to give length.
    
    %     allperm2 = [STATS.Perimeter]';
    %     data3 = allperm2.*0.11./2;
    
    %     data2 = data1(find(data1 > 0)); % filters data
    %     data4 = data1(find(data1 > 1.)); % filters data
    L1 = [L1 ;data1];  %%% Attention: (VM) I kept the L1 and commented L2 and L3 as 
    % they are useless.
    
    %    L2 = [L2 ;data3];
    %    L3 = [L3 ;data3];
    
    % y(k,1) = mean(data2);
    % %     data2 = num2str(median(I));
    % %     L2 = (data2);
    %     y(k,2) = median(data2);
    % %     data3 = num2str(mad(I,1));
    % %     L3 = (data3);
    %      y(k,3) = mad(data2,1);
    %      y(k,4) = median(data3);
    % txt = tiffFiles(k).name;
    % file = [ txt(1:end-4) '_data1.txt' ]
    % save(file,'data1','-ascii')
    %
    % file = [ txt(1:end-4) '_data2.txt' ]
    % save(file,'data2','-ascii')
    
end

BASENORMAREA = (0:0.01:5)*1e-3;
vbin = (0:.25:50);


% med = num2str(median(L2));
% med1 = num2str(median(L3));
% avg = num2str(mean(L2));
% stdev = num2str(std(L2));
% MAD = num2str(mad(L2));

med = num2str(median(L1))
avg = num2str(mean(L1));
stdev = num2str(std(L1));
MAD = num2str(mad(L1));

%size_length=size(L2);
size_length=size(L1);
count = num2str(size_length(1));

FontForPlot='Arial';
Fsize=15;

DodgerBlue=[ 0.1172    0.5625    1.0000];
Navy=[0         0    0.5000];
Orange=[1.0000    0.6445         0];
FireBrick=[0.6953    0.1328    0.1328];
Plum=[0.8633    0.6250    0.8633];
Purple=[0.5000         0    0.5000];
ForestGreen=[0.1328    0.5430    0.1328];
MediumSeaGreen=[0.2344    0.6992    0.4414];
IndianRed=[ 0.8008    0.3594    0.3594];


figure (8)



[h,stats] = cdfplot(L1);
hold on
line([stats.median stats.median],[0 0.5],'Color','k','LineStyle',':')
line([0 stats.median],[0.5 0.5],'Color','k','LineStyle',':')
plot(stats.median,0.5,'*k','Linewidth',4)
text(0.9+stats.median,0.5,'Median')

%%%%%%%% CODE MODIFIED BY ELISA %%%%%%%%%%%%%%%%%%%%%
%%%% This normalizes the distribution so that the *integral* (the area under the function f below) is equal to one
% [f,x] = hist(L2,vbin);
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %subplot(3,2,1)
%   NDist=f./trapz(x,f);
%    bar(x,NDist); % This plots the normalized distribution
% h = findobj(gca,'Type','patch');
% set(h,'FaceColor',Purple,'EdgeColor',Purple)
% xlim([0 40])
% ylim([0 1])
% xlabel('Tubes length (microns)','FontName',FontForPlot,'Fontsize',Fsize);
% ylabel('Normalized Distribution','FontName',FontForPlot,'Fontsize',Fsize);
%    title(char('DAE-E Tiles 20131025: End-to-End Joining t=60min','100% No Toehold: 00% Toehold'),'FontName',FontForPlot,'Fontsize',Fsize)
%    set(gca,'FontSize',Fsize,'FontName',FontForPlot);
% tmp_text=['Total Count: ' count]
% text(27,.8,tmp_text, 'FontSize', 15);
% tmp_text2=['Median w/o <0.33: ' med]
% text(27,.7,tmp_text2, 'FontSize', 15);
% tmp_text3=['Median w/o <1.0: ' med1]
% text(27,.6,tmp_text3, 'FontSize', 15);
% tmp_text4=['Mean: ' avg]
% text(27,.5,tmp_text4, 'FontSize', 15);
% tmp_text5=['MAD: ' MAD]
% text(27,.4,tmp_text5, 'FontSize', 15);
% tmp_text6=['STD: ' stdev]
% text(27,.3,tmp_text6, 'FontSize', 15);

filename = ('30s_30'); % (VM) : In a case of saving data to text file

%        set(gcf, 'PaperUnits', 'centimeters');
%        set(gcf, 'PaperPosition', [0 0 16 10]);
%        set(gcf, 'PaperSize', [16 10]);
%        print(gcf,'-dpng', filename)

%horizontalsize=16cm
%verticalsize=10cm

file = [filename '_raw.txt' ] % (VM) : In a case of saving data to text file
save(file,'L1','-ascii') % (VM) : In a case of saving data to text file

%file = [filename 'noremoval_raw.txt' ]
%save(file,'L2','-ascii')
